datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
  emitOnly = "models"
}

model DecisionTree {
  uuid                  String   @id @db.Uuid @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  status                TreeStatus @default(ACTIVE)
  name                  String
  /// @TypeGraphQL.omit(output: true, input: true)
  Tags                  Tag[]
  treeData              Json?     @db.JsonB
  yDocument             String?
  /// @TypeGraphQL.omit(output: true, input: true)
  owner                 User     @relation(fields: [ownerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  /// @TypeGraphQL.omit(output: true, input: true)
  ownerUuid             String   @db.Uuid
}

model User {
  id                    Int            @unique @default(autoincrement())
  uuid                  String         @id @db.Uuid @default(uuid())
  name                  String?
  role                  Role           @default(USER)
  email                 String         @unique
  password              String
  emailIsVerified       Boolean       @default(false)
  DecisionTrees         DecisionTree[]
  Token                 Token[]
  UserTags              Tag[]
  WhitelistEntries      WhitelistEntry[]
}

model WhitelistEntry {
  id                    Int      @unique @default(autoincrement())
  createdAt             DateTime @default(now())
  createdBy             User     @relation(fields: [creatorUuid], references: [uuid])
  creatorUuid           String   @db.Uuid
  email                 String   @unique
  sendInvite            Boolean  @default(false)
  dateOfLastInvite      DateTime?
}

model Token {
  id                    Int           @id @default(autoincrement())
  token                 String
  type                  TokenType
  owner                 User          @relation(fields: [ownerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  ownerUuid             String        @db.Uuid
  expires               DateTime
  blacklisted           Boolean       @default(false)
}

model Tag {
  id                   Int           @id @default(autoincrement())
  text                 String
  color                String?
  owner                User?          @relation(fields: [ownerUuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  ownerUuid            String?        @db.Uuid
  DecisionTrees        DecisionTree[]
  // @@unique([ownerUuid, text], map: "TheLastUser_firstName_lastName_unique_constraint")
}

enum Role {
  USER
  STAFF
  DEVELOPER
  ADMIN
}

enum TokenType {
  ACCESS
  REFRESH
  RESET_PASSWORD
  VERIFY_EMAIL
}

enum TreeStatus {
  ACTIVE
  ARCHIVED
}